{"version":3,"sources":["components/DataTable.js","components/TextInput.js","services/getNobels.js","App.js","index.js"],"names":["CustomLoadingOverlay","style","position","top","width","LinearProgress","CustomToolbar","DataTable","nobelPrizes","pageSize","rowsPages","handlePageChange","rows","rowCount","map","val","i","id","_id","firstname","born","died","bornCountry","bornCity","gender","prizesYear","prizes","curr","year","prizesCategory","category","prizesMotivation","motivation","prizesShare","share","affiliationsName","affiliations","deepCurr","name","affiliationsCity","city","affiliationsCountry","country","height","columns","field","headerName","rowsPerPageOptions","components","Toolbar","LoadingOverlay","checkboxSelection","onPageChange","useStyles","makeStyles","theme","root","margin","spacing","TextInput","props","classes","className","noValidate","autoComplete","Input","placeholder","inputProps","onChange","event","target","value","limit","a","params","URLSearchParams","append","queryParams","axios","get","results","data","nobels","console","error","App","useState","setNobelPrizes","setPageSize","setLimit","rowsPerPage","setRowsPerPage","useEffect","mounted","getList","then","items","newArr","firstHalf","Math","ceil","secondHalf","thirdHalf","push","length","newLimit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7dec5cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  GridOverlay,\r\n  DataGrid,\r\n  GridToolbarContainer,\r\n  GridColumnsToolbarButton,\r\n  GridFilterToolbarButton,\r\n  GridDensitySelector,\r\n  GridToolbarExport\r\n} from '@material-ui/data-grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n// import SelectMenu from './SelectMenu'\r\n\r\nfunction CustomLoadingOverlay() {\r\n  return (\r\n    <GridOverlay>\r\n      <div style={{ position: 'absolute', top: 0, width: '100%' }}>\r\n        <LinearProgress />\r\n      </div>\r\n    </GridOverlay>\r\n  );\r\n}\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <GridColumnsToolbarButton />\r\n      <GridFilterToolbarButton />\r\n      <GridDensitySelector />\r\n      <GridToolbarExport />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nconst DataTable = ({ nobelPrizes, pageSize, rowsPages, handlePageChange, rowCount }) => {\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 120 },\r\n    { field: \"firstname\", headerName: \"Name\", width: 150 },\r\n    { field: \"born\", headerName: \"Born\", width: 100 },\r\n    { field: \"died\", headerName: \"Died\", width: 100 },\r\n    { field: \"bornCountry\", headerName: \"Country\", width: 130 },\r\n    { field: \"bornCity\", headerName: \"City\", width: 130 },\r\n    { field: \"gender\", headerName: \"Gender\", width: 100 },\r\n    { field: \"prizesYear\", headerName: \"Prize Year\", width: 120 },\r\n    { field: \"prizesCategory\", headerName: \"Prize Category\", width: 130 },\r\n    { field: \"prizesMotivation\", headerName: \"Prize Motivation\", width: 250 },\r\n    { field: \"prizesShare\", headerName: \"Prize Share\", width: 130 },\r\n    { field: \"affiliationsName\", headerName: \"Affiliation Place\", width: 180 },\r\n    { field: \"affiliationsCity\", headerName: \"Affiliation City\", width: 180 },\r\n    { field: \"affiliationsCountry\", headerName: \"Affiliation Country\", width: 180 },\r\n  ];\r\n\r\n  const rows = nobelPrizes.map((val, i) => {\r\n    return {\r\n      id: val._id,\r\n      firstname: val.firstname,\r\n      born: val.born,\r\n      died: val.died,\r\n      bornCountry: val.bornCountry,\r\n      bornCity: val.bornCity,\r\n      gender: val.gender,\r\n      prizesYear: val.prizes.map((curr) => {\r\n        return curr.year;\r\n      }),\r\n      prizesCategory: val.prizes.map((curr) => {\r\n        return curr.category;\r\n      }),\r\n      prizesMotivation: val.prizes.map((curr) => {\r\n        return curr.motivation;\r\n      }),\r\n      prizesShare: val.prizes.map((curr) => {\r\n        return curr.share;\r\n      }),\r\n      affiliationsName: val.prizes.map((curr) => {\r\n        return curr.affiliations.map((deepCurr) => {\r\n          return deepCurr.name;\r\n        });\r\n      }),\r\n      affiliationsCity: val.prizes.map((curr) => {\r\n        return curr.affiliations.map((deepCurr) => {\r\n          return deepCurr.city;\r\n        });\r\n      }),\r\n      affiliationsCountry: val.prizes.map((curr) => {\r\n        return curr.affiliations.map((deepCurr) => {\r\n          return deepCurr.country;\r\n        });\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div style={{ height: 1000, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        // pagination {...nobelPrizes} \r\n        // paginationMode=\"server\"\r\n        columns={columns}\r\n        rowsPerPageOptions={rowsPages}\r\n        pageSize={pageSize}\r\n        components={{\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: CustomLoadingOverlay,\r\n          // Pagination: CustomPagination\r\n        }}\r\n        checkboxSelection\r\n        onPageChange={handlePageChange}\r\n      />\r\n      {/* <SelectMenu /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n\r\n//Rows per page\r\n// rowsPerPageOptions={[10, 20, 30]}","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from '@material-ui/core/Input';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst TextInput = (props) => {\r\n  const classes = useStyles();\r\n  function handleChange(event) {\r\n    // Here, we invoke the callback with the new value\r\n    props.onChange(event.target.value);\r\n  }\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <Input placeholder=\"Limit\" inputProps={{ 'aria-label': 'description' }} onChange={handleChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import axios from \"axios\";\r\n\r\nexport async function getList(limit) {\r\n  let params = new URLSearchParams();\r\n  // params.append(\"page\", page);\r\n  params.append(\"limit\", limit);\r\n  const queryParams = {\r\n    params,\r\n  };\r\n  try {\r\n    const { data: results } = await axios.get(\r\n      \"/api/v1/nobel/allNobels\",\r\n      queryParams\r\n    );\r\n    return results.data.nobels;\r\n  } catch (e) {\r\n    return console.error(e);\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DataTable from \"./components/DataTable\";\r\nimport TextInput from \"./components/TextInput\";\r\nimport { getList } from \"./services/getNobels\";\r\n\r\nconst App = () => {\r\n  const [nobelPrizes, setNobelPrizes] = useState([]);\r\n  // const [page, setPage] = useState(1);\r\n  //pageSize is number of rows per page\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [limit, setLimit] = useState(100);\r\n  const [rowsPerPage, setRowsPerPage] = useState([10, 15, 30]);\r\n\r\n  function handleLimit(newLimit) {\r\n    //shortcut for converting string to number\r\n    setLimit(newLimit * 1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    //mounted checks that state updates only when component is mounted due to async operations\r\n    let mounted = true;\r\n    getList(limit).then((items) => {\r\n      if (mounted) {\r\n        setNobelPrizes(items);\r\n      }\r\n    });\r\n    return () => (mounted = false);\r\n  }, [limit]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    const newArr = [];\r\n    const firstHalf = Math.ceil(limit / 2);\r\n    const secondHalf = Math.ceil(firstHalf / 2);\r\n    const thirdHalf = Math.ceil(secondHalf / 2);\r\n    newArr.push(firstHalf, secondHalf, thirdHalf);\r\n\r\n    if (mounted) {\r\n      if (limit === 100 || limit === 0) {\r\n        setPageSize(10);\r\n        setRowsPerPage([10, 15, 30]);\r\n      }\r\n      setPageSize(thirdHalf);\r\n      setRowsPerPage(newArr);\r\n    } else {\r\n      return () => (mounted = false);\r\n    }\r\n  }, [limit, pageSize]);\r\n\r\n  // console.log('page', page);\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        nobelPrizes={nobelPrizes}\r\n        rowCount={nobelPrizes.length}\r\n        pageSize={pageSize}\r\n        rowsPages={rowsPerPage}\r\n        // handlePageChange={(param) => setPage(param.page)}\r\n      />\r\n      <TextInput onChange={handleLimit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}